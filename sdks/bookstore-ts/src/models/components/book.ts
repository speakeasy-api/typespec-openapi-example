/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Type = {
    Book: "Book",
} as const;
export type Type = ClosedEnum<typeof Type>;

/**
 * Represents a book in the store
 */
export type Book = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Title of the publication
     */
    title: string;
    /**
     * Publication date
     */
    publishDate: Date;
    /**
     * Price in USD
     */
    price: number;
    type: Type;
    /**
     * Author of the book
     */
    author: string;
    /**
     * ISBN of the book
     */
    isbn: string;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> = Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    export const inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Book$inboundSchema: z.ZodType<Book, z.ZodTypeDef, unknown> = z.object({
    id: z.string(),
    title: z.string(),
    publishDate: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    price: z.number(),
    type: Type$inboundSchema,
    author: z.string(),
    isbn: z.string(),
});

/** @internal */
export type Book$Outbound = {
    id: string;
    title: string;
    publishDate: string;
    price: number;
    type: string;
    author: string;
    isbn: string;
};

/** @internal */
export const Book$outboundSchema: z.ZodType<Book$Outbound, z.ZodTypeDef, Book> = z.object({
    id: z.string(),
    title: z.string(),
    publishDate: z.date().transform((v) => v.toISOString()),
    price: z.number(),
    type: Type$outboundSchema,
    author: z.string(),
    isbn: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Book$ {
    /** @deprecated use `Book$inboundSchema` instead. */
    export const inboundSchema = Book$inboundSchema;
    /** @deprecated use `Book$outboundSchema` instead. */
    export const outboundSchema = Book$outboundSchema;
    /** @deprecated use `Book$Outbound` instead. */
    export type Outbound = Book$Outbound;
}
