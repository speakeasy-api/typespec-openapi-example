/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Book, Book$inboundSchema, Book$Outbound, Book$outboundSchema } from "./book.js";
import {
    Magazine,
    Magazine$inboundSchema,
    Magazine$Outbound,
    Magazine$outboundSchema,
} from "./magazine.js";
import * as z from "zod";

export type Publication = (Book & { type: "Book" }) | (Magazine & { type: "Magazine" });

/** @internal */
export const Publication$inboundSchema: z.ZodType<Publication, z.ZodTypeDef, unknown> = z.union([
    Book$inboundSchema.and(
        z.object({ type: z.literal("Book") }).transform((v) => ({ type: v.type }))
    ),
    Magazine$inboundSchema.and(
        z.object({ type: z.literal("Magazine") }).transform((v) => ({ type: v.type }))
    ),
]);

/** @internal */
export type Publication$Outbound =
    | (Book$Outbound & { type: "Book" })
    | (Magazine$Outbound & { type: "Magazine" });

/** @internal */
export const Publication$outboundSchema: z.ZodType<
    Publication$Outbound,
    z.ZodTypeDef,
    Publication
> = z.union([
    Book$outboundSchema.and(
        z.object({ type: z.literal("Book") }).transform((v) => ({ type: v.type }))
    ),
    Magazine$outboundSchema.and(
        z.object({ type: z.literal("Magazine") }).transform((v) => ({ type: v.type }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Publication$ {
    /** @deprecated use `Publication$inboundSchema` instead. */
    export const inboundSchema = Publication$inboundSchema;
    /** @deprecated use `Publication$outboundSchema` instead. */
    export const outboundSchema = Publication$outboundSchema;
    /** @deprecated use `Publication$Outbound` instead. */
    export type Outbound = Publication$Outbound;
}
