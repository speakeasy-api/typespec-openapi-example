/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const MagazineType = {
    Magazine: "Magazine",
} as const;
export type MagazineType = ClosedEnum<typeof MagazineType>;

/**
 * Represents a magazine in the store
 */
export type Magazine = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Title of the publication
     */
    title: string;
    /**
     * Publication date
     */
    publishDate: Date;
    /**
     * Price in USD
     */
    price: number;
    type: MagazineType;
    /**
     * Issue number of the magazine
     */
    issueNumber: number;
    /**
     * Publisher of the magazine
     */
    publisher: string;
};

/** @internal */
export const MagazineType$inboundSchema: z.ZodNativeEnum<typeof MagazineType> =
    z.nativeEnum(MagazineType);

/** @internal */
export const MagazineType$outboundSchema: z.ZodNativeEnum<typeof MagazineType> =
    MagazineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MagazineType$ {
    /** @deprecated use `MagazineType$inboundSchema` instead. */
    export const inboundSchema = MagazineType$inboundSchema;
    /** @deprecated use `MagazineType$outboundSchema` instead. */
    export const outboundSchema = MagazineType$outboundSchema;
}

/** @internal */
export const Magazine$inboundSchema: z.ZodType<Magazine, z.ZodTypeDef, unknown> = z.object({
    id: z.string(),
    title: z.string(),
    publishDate: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    price: z.number(),
    type: MagazineType$inboundSchema,
    issueNumber: z.number().int(),
    publisher: z.string(),
});

/** @internal */
export type Magazine$Outbound = {
    id: string;
    title: string;
    publishDate: string;
    price: number;
    type: string;
    issueNumber: number;
    publisher: string;
};

/** @internal */
export const Magazine$outboundSchema: z.ZodType<Magazine$Outbound, z.ZodTypeDef, Magazine> =
    z.object({
        id: z.string(),
        title: z.string(),
        publishDate: z.date().transform((v) => v.toISOString()),
        price: z.number(),
        type: MagazineType$outboundSchema,
        issueNumber: z.number().int(),
        publisher: z.string(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Magazine$ {
    /** @deprecated use `Magazine$inboundSchema` instead. */
    export const inboundSchema = Magazine$inboundSchema;
    /** @deprecated use `Magazine$outboundSchema` instead. */
    export const outboundSchema = Magazine$outboundSchema;
    /** @deprecated use `Magazine$Outbound` instead. */
    export type Outbound = Magazine$Outbound;
}
