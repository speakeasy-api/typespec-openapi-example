openapi: 3.0.0
info:
  title: Book Store API
  termsOfService: https://bookstore.example.com/terms
  contact:
    name: API Support
    url: https://bookstore.example.com/support
    email: support@bookstore.example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  description: API for managing a book store inventory and orders
  version: 1.0.0
tags:
  - name: publications
  - name: orders
paths:
  /orders:
    post:
      tags:
        - orders
      operationId: placeOrder
      description: Place a new order
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              order:
                id: abc
                customerId: '123'
                items:
                  - {}
                  - {}
                totalPrice: 29.98
                status: Pending
  /orders/{id}:
    get:
      tags:
        - orders
      operationId: getOrder
      description: Get an order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: {}
    post:
      tags:
        - orders
      operationId: updateOrderStatus
      description: Update the status of an order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatus'
            example:
              id: '123'
              status: Shipped
  /publications:
    get:
      tags:
        - publications
      operationId: listPublications
      description: List all publications
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publication'
              example:
                - {}
                - {}
      x-speakeasy-retries:
        strategy: backoff
        backoff:
          initialInterval: 500
          maxInterval: 60000
          maxElapsedTime: 3600000
          exponent: 1.5
        statusCodes:
          - 5XX
        retryConnectionErrors: true
    post:
      tags:
        - publications
      operationId: createPublication
      description: Create a new publication
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
              example: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publication'
            example:
              publication: {}
  /publications/{id}:
    get:
      tags:
        - publications
      operationId: getPublication
      description: Get a specific publication by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
              example: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: {}
components:
  schemas:
    Book:
      type: object
      required:
        - type
        - author
        - isbn
      properties:
        type:
          type: string
          enum:
            - Book
        author:
          type: string
          description: Author of the book
        isbn:
          type: string
          description: ISBN of the book
      allOf:
        - $ref: '#/components/schemas/PublicationBase'
      example:
        type: Book
        author: Author Name
        isbn: '1234567890'
      description: Represents a book in the store
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message
      example:
        code: 404
        message: Publication not found
      description: Error response
    Magazine:
      type: object
      required:
        - type
        - issueNumber
        - publisher
      properties:
        type:
          type: string
          enum:
            - Magazine
        issueNumber:
          type: integer
          format: int32
          description: Issue number of the magazine
        publisher:
          type: string
          description: Publisher of the magazine
      allOf:
        - $ref: '#/components/schemas/PublicationBase'
      example:
        type: Magazine
        issueNumber: 1
        publisher: Publisher Name
      description: Represents a magazine in the store
    Order:
      type: object
      required:
        - id
        - customerId
        - items
        - totalPrice
        - status
      properties:
        id:
          type: string
          description: Unique identifier for the order
        customerId:
          type: string
          description: Customer who placed the order
        items:
          type: array
          items:
            $ref: '#/components/schemas/Publication'
          description: List of publications in the order
        totalPrice:
          type: number
          format: float
          description: Total price of the order
        status:
          allOf:
            - $ref: '#/components/schemas/OrderStatus'
          description: Status of the order
      example:
        id: abc
        customerId: '123'
        items:
          - {}
          - {}
        totalPrice: 29.98
        status: Pending
      description: Represents an order for publications
    OrderStatus:
      type: string
      enum:
        - Pending
        - Shipped
        - Delivered
        - Cancelled
      description: Possible statuses for an order
    Publication:
      oneOf:
        - $ref: '#/components/schemas/Book'
        - $ref: '#/components/schemas/Magazine'
      discriminator:
        propertyName: type
        mapping:
          Book: '#/components/schemas/Book'
          Magazine: '#/components/schemas/Magazine'
      example: {}
    PublicationBase:
      type: object
      required:
        - id
        - title
        - publishDate
        - price
        - type
      properties:
        id:
          type: string
          description: Unique identifier
        title:
          type: string
          description: Title of the publication
        publishDate:
          type: string
          format: date-time
          description: Publication date
        price:
          type: number
          format: float
          description: Price in USD
        type:
          allOf:
            - $ref: '#/components/schemas/PublicationType'
          description: Type of publication
      description: Base model for books and magazines
    PublicationType:
      type: string
      enum:
        - Book
        - Magazine
    Versions:
      type: string
      enum:
        - 1.0.0
servers:
  - url: http://127.0.0.1:4010
    description: Book Store API v1
    variables: {}
